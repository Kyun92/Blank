{"version":3,"sources":["Components/TextArea/TextArea.js","Components/Header/Header.js","Components/ButtonBox/ButtonBox.js","Components/Footer/Footer.js","Components/InstaTemplate.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","_ref","onResize","onChange","width","originText","changedText","isWhite","dotBox","React","createRef","react_default","a","createElement","className","concat","ref","react_textarea_autosize_esm_browser","style","spellCheck","e","value","placeholder","esm","handleWidth","handleHeight","current","clientWidth","Header","ButtonBox","onChangeText","onClear","copied","onCopy","textLength","onChangeTheme","warnMessage","onClick","lib","text","Footer","target","href","rel","InstaTemplate","Fragment","Components_Header_Header","Components_TextArea_TextArea","Components_ButtonBox_ButtonBox","Components_Footer_Footer","App","state","undefined","handleCheckTextLength","_this$state","_this","length","handleChange","setState","dotBoxWidth","handleClear","handleTextChange","_this$state2","i","push","join","handleCopy","_this$state3","handleChangeTheme","_this$state4","this","Components_InstaTemplate","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.80873b72.chunk.js","sourcesContent":["import React from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\nimport ReactResizeDetector from \"react-resize-detector\";\nimport \"./TextArea.scss\";\n\nconst TextArea = ({\n  onResize,\n  onChange,\n  width,\n  originText,\n  changedText,\n  isWhite\n}) => {\n  const dotBox = React.createRef();\n  return (\n    <div className=\"textarea_container\">\n      <section className=\"textarea_box\">\n        <div\n          className={`textarea_dotBox ${isWhite && \"whiteTheme\"}`}\n          ref={dotBox}\n        >\n          <p className=\"dot red left\">●</p>\n          <p className=\"dot yellow\">●</p>\n          <p className=\"dot green\">●</p>\n        </div>\n        <TextareaAutosize\n          className={`textarea_input ${isWhite && \"whiteTheme\"}`}\n          style={{\n            width: `${width}px`\n          }}\n          spellCheck=\"false\"\n          onChange={e => {\n            onChange(e);\n          }}\n          value={changedText === \"\" ? originText : changedText}\n          placeholder=\"줄바꿈을 신경쓰지 마시고 마음껏 쓰세요 👏\"\n        />\n        <ReactResizeDetector\n          handleWidth\n          handleHeight\n          onResize={() => {\n            onResize(dotBox.current.clientWidth);\n          }}\n        />\n      </section>\n    </div>\n  );\n};\n\nexport default TextArea;\n","/* eslint-disable jsx-a11y/accessible-emoji */\nimport React from \"react\";\nimport \"./Header.scss\";\nconst Header = () => {\n  return (\n    <div>\n      <p className=\"Header_text\">Blank 👏</p>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport \"./ButtonBox.scss\";\n\nconst ButtonBox = ({\n  onChangeText,\n  changedText,\n  onClear,\n  copied,\n  onCopy,\n  textLength,\n  onChangeTheme,\n  warnMessage\n}) => {\n  return (\n    <div className=\"buttonBox\">\n      <p className={`textLength ${textLength > 2000 && \"red\"}`}>\n        {textLength} / 2000\n      </p>\n      <button className=\"button_common\" onClick={() => onClear()}>\n        Clear!\n      </button>\n      <button className=\"button_common\" onClick={() => onChangeTheme()}>\n        THEME\n      </button>\n      <button\n        className={`button_common green ${changedText && \"red\"}`}\n        onClick={() => {\n          onChangeText();\n        }}\n      >\n        {changedText === \"\" ? \"Change!\" : \"Recovery!\"}\n      </button>\n\n      <CopyToClipboard text={changedText} onCopy={() => onCopy()}>\n        <button className={`button_common ${copied && \"green\"}`}>\n          {copied ? \"Copied✓\" : \"Copy!\"}\n        </button>\n      </CopyToClipboard>\n      <p className=\"warnMessage\">{warnMessage}</p>\n    </div>\n  );\n};\n\nexport default ButtonBox;\n","/* eslint-disable react/jsx-no-target-blank */\nimport React from \"react\";\nimport \"./Footer.scss\";\n\nconst Footer = () => {\n  return (\n    <div className=\"git\">\n      <a target=\"_blank\" href=\"https://github.com/Kyun92\" rel=\"noopener\">\n        © 2019 ・ Kyun\n      </a>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport TextArea from \"./TextArea/TextArea\";\nimport Header from \"./Header/Header\";\nimport ButtonBox from \"./ButtonBox/ButtonBox\";\nimport Footer from \"./Footer/Footer\";\n\nconst InstaTemplate = ({\n  onResize,\n  onChange,\n  onClear,\n  onCopy,\n  width,\n  originText,\n  changedText,\n  onChangeText,\n  copied,\n  textLength,\n  isWhite,\n  onChangeTheme,\n  warnMessage\n}) => {\n  return (\n    <React.Fragment>\n      <Header />\n      <TextArea\n        originText={originText}\n        onResize={onResize}\n        onChange={onChange}\n        width={width}\n        changedText={changedText}\n        isWhite={isWhite}\n      />\n      <ButtonBox\n        textLength={textLength}\n        onChangeText={onChangeText}\n        changedText={changedText}\n        onClear={onClear}\n        onCopy={onCopy}\n        copied={copied}\n        onChangeTheme={onChangeTheme}\n        warnMessage={warnMessage}\n      />\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default InstaTemplate;\n","import React, { Component } from \"react\";\nimport InstaTemplate from \"./Components/InstaTemplate\";\n\nclass App extends Component {\n  state = {\n    width: undefined,\n    originText: \"\",\n    changedText: \"\",\n    copied: false,\n    textLength: 0,\n    isWhite: false,\n    warnMessage: \"\"\n  };\n\n  handleCheckTextLength = () => {\n    const { originText, changedText } = this.state;\n    if (changedText !== \"\") {\n      return changedText.length;\n    }\n    return originText.length;\n  };\n\n  handleChange = e => {\n    this.setState({\n      originText: e.target.value,\n      textLength: e.target.value.length,\n      warnMessage: \"\"\n    });\n  };\n\n  handleWidth = dotBoxWidth => {\n    this.setState({\n      width: dotBoxWidth - 14\n    });\n  };\n\n  handleClear = () => {\n    this.setState({\n      originText: \"\",\n      changedText: \"\",\n      copied: false,\n      textLength: 0,\n      warnMessage: \"\"\n    });\n  };\n\n  handleTextChange = () => {\n    const { originText, changedText } = this.state;\n    if (!originText) {\n      this.setState({\n        warnMessage: \"텍스트를 입력해야합니다! 🤨\"\n      });\n      return;\n    }\n\n    //recovery\n    if (changedText !== \"\") {\n      this.setState({\n        changedText: \"\",\n        copied: false,\n        textLength: originText.length,\n        warnMessage: \"\"\n      });\n      return;\n    }\n    let text = [];\n    for (let i = 0; i < originText.length; i++) {\n      if (originText[i] === \"\\n\" && originText[i + 1] === \"\\n\") {\n        text.push(\"\\n⠀⠀⠀\");\n        continue;\n      }\n      text.push(originText[i]);\n    }\n    this.setState({\n      changedText: text.join(\"\"),\n      textLength: text.join(\"\").length,\n      warnMessage: \"\"\n    });\n  };\n\n  handleCopy = () => {\n    const { changedText, originText } = this.state;\n    if (changedText === \"\") {\n      this.setState({\n        warnMessage: \"원문을 변경하셔야합니다! 🤨\"\n      });\n      return;\n    }\n    if (originText !== \"\") {\n      this.setState({\n        copied: !this.state.copied\n      });\n    }\n  };\n\n  handleChangeTheme = () => {\n    this.setState({\n      isWhite: !this.state.isWhite\n    });\n  };\n\n  render() {\n    const {\n      width,\n      originText,\n      changedText,\n      copied,\n      textLength,\n      isWhite,\n      warnMessage\n    } = this.state;\n    return (\n      <InstaTemplate\n        width={width}\n        textLength={textLength}\n        originText={originText}\n        changedText={changedText}\n        copied={copied}\n        isWhite={isWhite}\n        warnMessage={warnMessage}\n        onResize={this.handleWidth}\n        onChange={this.handleChange}\n        onChangeText={this.handleTextChange}\n        onClear={this.handleClear}\n        onCopy={this.handleCopy}\n        onChangeTheme={this.handleChangeTheme}\n      />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}